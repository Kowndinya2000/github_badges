<!DOCTYPE html>
<html>
<head>
    <title>Hey F2</title>
    <meta charset="utf-8">
    <style>
        .view-lines{
        background-color:#ffffff;color:white;padding:20px;
        font-family: 'Nunito', sans-serif;
        box-shadow:0px 6px 16px 0px rgba(0,0,0,0.2);
        width: 95%;
        min-height: 50rem;
        margin-left: 3rem;
        margin-top: 2rem;
        margin-bottom: 2rem;
        position: relative;
        }
        .button {
display: inline-block;
border-radius: 4px;
background-color: #f4511e;
border: none;
color: #FFFFFF;
text-align: center;
font-size: 2.1rem;
padding: 1rem;
width: 20rem;
transition: all 0.5s;
cursor: pointer;
margin-left: 3rem;
margin-top: 1rem;
}
.button span {
cursor: pointer;
display: inline-block;
position: relative;
transition: 0.5s;
}
.button span:after {
content: '\00bb';
position: absolute;
opacity: 0;
top: 0;
right: -20px;
transition: 0.5s;
}
.button:hover
{
box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24),0 17px 50px 0 rgba(0,0,0,0.19);
}
.button:hover span {
padding-right: 25px;
}
.button:hover span:after {
opacity: 1;
right: 0;
}     
</style>
</head>

<body>
    <script>var N_Pack = 0; var I_Class = 0; var I_methods = 0;</script>
    <script>
      
class Queue 
{ 
    constructor() 
    { 
        var it = 0;
        this.items = []; 
    } 
    push(element) 
    { 
    this.items.push(element); 
    } 
    pop() 
    { 
    if(this.isEmpty()) 
        return "Underflow"; 
    this.items.shift(); 
    } 
    front() 
    { 
    if(this.isEmpty()) 
        return "No elements in Queue"; 
    return this.items[it]; 
    } 
    isEmpty() 
    {  
    return (this.items.length == 0); 
    } 
    size()
    {
    return this.items.length;
    }
    printQueue() 
    { 
    for(var i = 0; i < this.items.length; i++) 
        console.log(this.items[i]);  
    } 
} 
  var queue = new Queue(); 
  var flag = false;
</script>
    <form action="/" method="post" name="myForm">
        <input type="text" name="gitlink" id="git">
    </form>
    <script>
        function loadDoc(str1,bool_flag) {
          
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 304) {
              var doop = []; 
              doop = JSON.parse(this.responseText).message;
              var i;
              for(i=0;i<doop.length;i++)
              {
                queue.push(doop[i]);
                console.log(doop[i]);
              }
              if(bool_flag)
              {
                var i;
              if(doop.length >= 1)
              document.getElementById("code").innerHTML += "https://github.com/" + str1 + "\n" ;
              for(i=0;i<doop.length;i++)
              {
                document.getElementById("code").innerHTML += doop[i] + "\n" ;
              }
                if(doop.length >= 1)
                  document.getElementById("code").innerHTML +=  "<br/>--------------------<br/>";
              }
              else
              {
               
              for(i=0;i<doop.length;i++)
              {
                 if(doop[i].includes("."))
                 {
                    if(str1.includes("master"))
                    loadDoc( str1 + "/" + doop[i],true);
                    else
                    loadDoc( str1 + "/blob/master/" + doop[i],true);
                 }
                 else
                 {
                  if(str1.includes("master"))
                    loadDoc( str1 + "/" + doop[i],true);
                  else
                  loadDoc( str1 + "/tree/master/" + doop[i],false);
                 }
              }
             
              }
              
              
            }
          };
          xhttp.open("POST", "/", false);
          xhttp.setRequestHeader('Content-type', "application/x-www-form-urlencoded")
          var str = str1;
          console.log(str);
          xhttp.send('link='+str);
         
        }
        </script>

        <script>
        function myFunct(arr)
        {
                            console.log("Hey");
                            console.log(arr);
                            var i = 0;
                            var pack = []; var p = 0;
                            var syn_class = []; var s = 0;
                            var inh_class = []; var inh = 0;
                            var methods = [];   var m = 0;
                            var overrides = 0;
                            var line;var words;var j = 0;
                            for(i=0;i<arr.length;i++)
                            {
                                line = arr[i];
                                words = line.split(' ');
                                for(j=0;j<words.length;j++)
                                {
                                    if(words[j] == ' ')
                                        continue;
                                    else
                                    {
                                        if(words[j] == "@override")
                                        {
                                            overrides++;
                                        }
                                        else if(words[j] == "import")
                                        {
                                            j++;
                                            while(words[j] == ' ')
                                            {
                                                j++;
                                            }
                                            pack[p] = words[j];
                                            p++;
                                            j--;
                                        }
                                        else if(words[j] == "class")
                                        {
                                            j++;
                                            while(words[j] == ' ')
                                            {
                                                j++;
                                            }
                                            var rt = 0;
                                            var fg = false;
                                            if(s>0)
                                            for(rt=0;rt<s;rt++)
                                            {
                                                if(syn_class[rt] == words[j])
                                                {
                                                  fg = true;
                                                  break;
                                                }
                                            }
                                            if(!fg)
                                            {
                                                syn_class[s] = words[j];
                                                s++;
                                            }
                                            j--;
                                        }
                                        else if(words[j] == "extends")
                                        {
                                            var rt = 0;
                                            var fg = false;
                                            if(inh>0)
                                            for(rt=0;rt<inh;rt++)
                                            {
                                                if(inh_class[rt] == words[j-1])
                                                {
                                                  fg = true;
                                                  break;
                                                }
                                            }
                                            if(!fg)
                                            {
                                            inh_class[inh] = words[j-1];
                                            inh++;
                                            }
                                            j++;
                                        }
                                        else if(words[j] == "void"
                                        || words[j] == "int"
                                        || words[j] == "int*"
                                        || words[j] == "char"
                                        || words[j] == "char*"
                                        || words[j] == "float"
                                        || words[j] == "float*"
                                        || words[j] == "double"
                                        || words[j] == "double*"
                                        || words[j] == "short"
                                        || words[j] == "short*"
                                        || words[j] == "byte"
                                        || words[j] == "byte*"
                                        || words[j] == "boolean"
                                        || words[j] == "string"
                                        )
                                        {
                                            
                                            j++;
                                            while(words[j] == ' ')
                                            {
                                                j++;
                                            }
                                            var temp = words[j].split('(');
                                            var tm = temp.length;
                                            if(tm>1)
                                            {
                                            var rt = 0;
                                            var fg = false;
                                            if(m>0)
                                            for(rt=0;rt<m;rt++)
                                            {
                                                if(methods[rt] == words[j])
                                                {
                                                  fg = true;
                                                  break;
                                                }
                                            }
                                            if(!fg)
                                            {
                                            methods[m] = temp[0];
                                            m++;
                                            } 
                                            }
                                            
                                            
                                            j--;
                                        }
                                        else if(words[j].includes("System") || words[j].includes("if") || words[j].includes("while") || words[j].includes("do") || words[j].includes("for"))
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            continue;
                                        }
                                    }
                                }
                            }
                            
                           
                            
                            
                            var ans;
                            document.getElementById("code").innerHTML +=  "Package:<br/>--------------<br/>";
                            
                            for(i=0;i<p;i++)
                            {
                                ans = pack[i].split(';');
                                document.getElementById("code").innerHTML +=  ans[0];
                              
                                document.getElementById("code").innerHTML +=  "<br/>";
                            }
                            document.getElementById("code").innerHTML +=  "Number of Packages: ";
                            document.getElementById("code").innerHTML +=  p;
                            document.getElementById("code").innerHTML +=  "<br/>--------------<br/>";
                            var tot =  inh + s;
                            document.getElementById("code").innerHTML +=   "Classes Used: ( Total = ";
                            document.getElementById("code").innerHTML +=  tot;
                            document.getElementById("code").innerHTML +=  " )<br/>";
                            
                            document.getElementById("code").innerHTML +=   "1)Inherited Classes ( ";
                            document.getElementById("code").innerHTML += inh ;
                            document.getElementById("code").innerHTML += " ):<br/>";
                           
                            for(i=0;i<inh;i++)
                            {
                                ans = inh_class[i];
                                var ans2 = ans.split('{');
                                if(ans2.length > 1)
                                {
                                    document.getElementById("code").innerHTML +=  ans2[0];    
                                }
                                else{
                                    document.getElementById("code").innerHTML +=  ans;
                            
                                }
                                
                                document.getElementById("code").innerHTML +=   "<br/>";
                              
                            }
                            document.getElementById("code").innerHTML +=   "2)Non-inherited Classes ( " ;
                            document.getElementById("code").innerHTML +=  s ;
                            document.getElementById("code").innerHTML +=  " ):<br/>";
                           
                            for(i=0;i<s;i++)
                            {
                                var ans;
                                ans = syn_class[i];
                                var ans2 = syn_class[i].split('{');
                                if(ans2.length > 1)
                                {
                                    document.getElementById("code").innerHTML +=  ans2[0];    
                                }
                                else{
                                    document.getElementById("code").innerHTML +=  ans;
                            
                                }
                                
                                document.getElementById("code").innerHTML +=    "<br/>";
                                
                            }
                            document.getElementById("code").innerHTML +=   "----------------<br/>Number of Methods: ( Total = " ;
                            document.getElementById("code").innerHTML +=  m ;
                            document.getElementById("code").innerHTML +=  " )<br/>";
                           
                            for(i=0;i<m;i++)
                            {
                                ans = methods[i];
                                document.getElementById("code").innerHTML +=    ans;
                               
                                document.getElementById("code").innerHTML +=    "<br/>";
                                
                            }
                            document.getElementById("code").innerHTML +=    "Num of Overrided Methods ( ";
                            document.getElementById("code").innerHTML +=   overrides ;
                            document.getElementById("code").innerHTML +=  " ):<br/>";
                            var non_over = m - overrides;
                            document.getElementById("code").innerHTML +=    "Non-Overrided methods ( " ;
                            document.getElementById("code").innerHTML +=  non_over ;
                            document.getElementById("code").innerHTML +=  " ):<br/>";
                            document.getElementById("code").innerHTML += '<button  style=" background: #4CAF50;color: white;border: 0px;border-radius: 0.5rem;padding-top: 1rem;padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">Packages<span class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">'
                                                                          + p +
                                                                          '</span></button><button  style=" background:#f4511e;color: white;border: 0px;border-radius: 0.5rem;padding-top: 1rem;padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">Inherited Methods<span class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">'
                                                                          + inh + 
                                                                          '</span></button><button  style=" background:blue;color: white;border: 0px;border-radius: 0.5rem;padding-top: 1rem;padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">Non Inherited Methods<span class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">'
                                                                          + s +
                                                                          '</span></button><button  style=" background:darkorchid;color: white;border: 0px;border-radius: 0.5rem;padding-top: 1rem;padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">Overriding Methods<span class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">'
                                                                          + overrides +
                                                                          '</span></button><button  style=" background:#555555;color: white;border: 0px;border-radius: 0.5rem;padding-top: 1rem;padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">Non Overriding Methods<span class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">'
                                                                          + non_over +
                                                                          '</span></button>';
                            
                            N_Pack += p;
                            I_Class += inh;
                            I_methods += overrides;
                           
        }
        </script>



    <script>
      function callDoc() 
      {
        document.getElementById("processing").innerHTML = "Processing please wait....\nOverall Code Assesment is under process";
        var str = document.getElementById("git").value;
        loadDoc(str,false);
        var matr = document.getElementById("code").innerHTML.split('--------------------');
        var t = 0;
        for(t=0;t<matr.length-1;t++)
        {
          myFunct(matr[t].split('\n'));
        }
        document.getElementById("processing").innerHTML = "Assessment Successful!";
        document.getElementById("f1").innerHTML =  N_Pack;
        document.getElementById("f2").innerHTML =  I_Class;
        document.getElementById("f3").innerHTML =  I_methods;
      }
    </script>
        <button onclick="callDoc()">OK</button>
        <p>Code Comes Here\n\n--------------------\n\n</p>
        <p id="code"></p>
        <div class = "view-lines" spellcheck="false"
        data-mprt="15";
        role="presentation" style="width: fit-content;min-height: 25rem;"
        aria-hidden="true">    
  <p  style="margin-top: 3rem;
  font-size: 2.5rem;
  margin-bottom: 3rem; 
  position: relative;
  color:#4CAF50;
  font-weight: bold;
  margin-left: 3rem;" id="processing">
    
    (ISHA's)  Overall Code Assesment  

      
  </p>
  <button  style=" background: #4CAF50;color: white;border: 0px;
  border-radius: 0.5rem;padding-top: 1rem; 
  padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">File Dependency (Packages)<span id="f1" class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">-</span></button>
  <button  style=" background:#f4511e;color: white;border: 0px;
  border-radius: 0.5rem;padding-top: 1rem;
  padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">Inheritence Level of Classes<span  id="f2" class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">-</span></button>


    <button  style=" background:blue;color: white;border: 0px;
border-radius: 0.5rem;padding-top: 1rem;
padding-bottom: 1rem;padding-left: 0.5rem;padding-right: 0.5rem;">Inheritence Level of Methods<span id="f3" class="badge" style="margin-left:0.5rem;background:darkorange;margin-right:0.5rem;">-</span></button>

        
</div>

  

       
</body>
</html>